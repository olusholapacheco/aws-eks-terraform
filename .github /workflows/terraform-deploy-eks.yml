name: Deploy and Destroy EKS Clusters

on:
  push:
    branches:
      - 'cluster-1'
      - 'cluster-2'

jobs:
  deploy:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        cluster_branch: ['cluster-1', 'cluster-2']

    steps:
      - name: Checkout cluster branch
        uses: actions/checkout@v2
        with:
          ref: ${{ matrix.cluster_branch }}

      - name: Set up AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets['AWS_ACCESS_KEY_ID_' + matrix.cluster_branch.toUpperCase()] }}
          aws-secret-access-key: ${{ secrets['AWS_SECRET_ACCESS_KEY_' + matrix.cluster_branch.toUpperCase()] }}
          aws-region: us-east-1

      - name: Get VPC ID for ${{ matrix.cluster_branch }}
        id: get-vpc
        run: |
          echo "::set-output name=vpc_id::${{ secrets.VPC_ID }}"

      - name: Get Subnet IDs for ${{ matrix.cluster_branch }}
        id: get-subnets
        run: |
          echo "::set-output name=subnet_ids::${{ secrets['SUBNET_IDS_' + matrix.cluster_branch.toUpperCase()] }}"

      - name: Deploy EKS Cluster - ${{ matrix.cluster_branch }}
        run: |
          cd ${{ matrix.cluster_branch }}
          terraform init
          terraform plan -var="cluster_name=${{ secrets['CLUSTER_NAME_' + matrix.cluster_branch.toUpperCase()] }}" -var="cluster_version=${{ secrets['CLUSTER_VERSION_' + matrix.cluster_branch.toUpperCase()] }}" -var="vpc_id=${{ steps.get-vpc.outputs.vpc_id }}" -var="subnet_ids=${{ steps.get-subnets.outputs.subnet_ids }}"
          terraform apply -auto-approve -var="cluster_name=${{ secrets['CLUSTER_NAME_' + matrix.cluster_branch.toUpperCase()] }}" -var="cluster_version=${{ secrets['CLUSTER_VERSION_' + matrix.cluster_branch.toUpperCase()] }}" -var="vpc_id=${{ steps.get-vpc.outputs.vpc_id }}" -var="subnet_ids=${{ steps.get-subnets.outputs.subnet_ids }}"

      - name: Destroy EKS Cluster - ${{ matrix.cluster_branch }}
        if: always()  
        run: |
          cd ${{ matrix.cluster_branch }}
          terraform init
          terraform destroy -auto-approve -var="cluster_name=${{ secrets['CLUSTER_NAME_' + matrix.cluster_branch.toUpperCase()] }}" -var="cluster_version=${{ secrets['CLUSTER_VERSION_' + matrix.cluster_branch.toUpperCase()] }}" -var="vpc_id=${{ steps.get-vpc.outputs.vpc_id }}" -var="subnet_ids=${{ steps.get-subnets.outputs.subnet_ids }}"
